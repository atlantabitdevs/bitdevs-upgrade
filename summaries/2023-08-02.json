{
  "summary": [
    {
      "summary": "Summary:\n\nThe author introduced a new community process to specify covenants last year. The goals were to build a consistent framework to evaluate covenant proposals, open up the consensus changes development process, and maintain a high-quality technical archive. Other initiatives, such as the bitcoin-inquisition fork and the archiving of covenant proposals, have also been undertaken. Monthly meetings were held to discuss Bitcoin contracting primitives, and in-depth discussions took place on the repository and chat channel. The author concluded that their time and energy would be better spent on Lightning Network development. They encourage others to continue working on covenant changes proposals and highlight the impact of Taproot and Schnorr on self-custody solutions. The author also mentions R&D work on CoinPool and the possibility of submitting security reviews of consensus changes. They emphasize the importance of technical historians and archivists, as well as QA devs, in advancing Bitcoin Script capabilities. The author is open to others taking the lead on the Bitcoin Contracting Primitives WG and suggests reaching out to them.",
      "summaryeli15": "The author is reflecting on a previous community process they introduced to specify covenants in Bitcoin. They discuss their goals and other related initiatives. They conclude that while covenant changes are important, they believe working on Lightning Network development is more critical at this time. They encourage others to continue working on covenant proposals and offer to support those who are interested. The author also mentions the need for technical historians and archivists in Bitcoin development.",
      "title": "On the experiment of the Bitcoin Contracting Primitives WG and marking this community process \"up for grabs\"",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021786.html"
    },
    {
      "summary": "The article discusses the implementation of a blinded version of 2-of-2 Schnorr Musig2 for statechains. In this implementation, the server is fully blinded and does not learn the aggregate public key, aggregate signature, or the message being signed. The security of this approach relies on the server's trust to report the number of partial signatures generated for a specific key. The key aggregation coefficient is calculated based on a set of public keys. To sign a message, each party generates a nonce and an aggregate nonce is computed. The parties then compute a challenge and their individual partial signatures. The final signature is the sum of the partial signatures. The article also explores the implications of blinding for party 1, where certain steps can be skipped as party 1 is blinded from the message. The author invites comments and discussions on the approach and potential issues.",
      "summaryeli15": "We want to use a technique called Schnorr Musig2 to protect the privacy of a server. The server will have a private key that's needed to sign things, but we want to make sure it doesn't learn certain information. In this method, the security relies on the server being trusted to report how many signatures it generated, while the verification of the signatures happens on the client side. The process involves generating keys, combining them, signing a message, and aggregating the results. By following certain steps, we can prevent the server from learning certain details.",
      "title": "Blinded 2-party Musig2",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html"
    },
    {
      "summary": "This article introduces a method for computing blinding factors in a way that allows for more efficient routing in privacy-focused protocols. The goal is to ensure that: \n- Non-Trampoline intermediate nodes only need to know one blinding factor.\n- The receiver only needs to know one blinding factor.\n- Trampoline nodes can provide blinding factors without the non-Trampoline intermediate nodes knowing they are on a trampoline route.\n\nThe article explains the process for direct communication between the sender and receiver, where the sender encrypts an onion using a blinding factor and sends it to the receiver along with a payment. The receiver can claim the payment by revealing the blinding factor and the secret value they hold.\n\nNext, the article explains the process for communication through an intermediate node, Carol. In this case, the sender generates additional blinding factors for Carol, ensuring that she can decrypt the onion without knowing the final destination. Carol then continues the process, adding her blinding factor and forwarding the onion.\n\nLastly, the article discusses the scenario where Carol is a Trampoline node and doesn't know the final destination. In this case, the sender encrypts the onion with the final destination and sends it to Carol. Carol then selects a route to reach the final destination and generates additional blinding factors for each node on the route.\n\nThrough this method, all nodes involved in the routing process have the necessary information to claim their incoming payment, while the ultimate receiver receives the same output regardless of the routing path.",
      "summaryeli15": "This text is talking about a mathematical way to hide information in a payment system. It explains how to make sure that only certain people can see the information and how to keep others from knowing who is involved in the payment. It uses different techniques based on if there are intermediate nodes or if there is a special kind of node called a \"Trampoline\" node. By using these techniques, the payment information can stay private and secure.",
      "title": "Computing Blinding Factors in a PTLC and Trampoline World",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html"
    },
    {
      "summary": "LNbits discovered an exploit that allows attackers to create fake balances by exploiting how invoices are handled. They patched it in version 0.10.5 and advise updating ASAP. The attack works by inserting a payment hash from one payment into a different payment, tricking the backend into thinking they are the same. The attacker creates two invoices, A and B'. They insert the payment hash from A into B', re-sign the invoice, and create a new account to pay B. The backend checks the payment hash, mistakenly matching it to A, and settles the payment by crediting A and debiting B, creating a fake balance. The mitigation is to use unique checking IDs or additional checks to ensure invoice details haven't been tampered with. The lessons are that attackers are sophisticated in Lightning Network attacks, and the \"payment hash\" in an invoice only represents a preimage hash, not payment details like amount or pubkey.",
      "summaryeli15": "The LNbits team found a way for attackers to create fake balances by tricking a system that handles invoices. They fixed the issue in their latest version and urge everyone to update. The attacker was able to use one payment's information to make it look like another payment. This problem might exist in other similar systems. The solution is for systems to use unique identifiers or do extra checks to make sure the invoice details haven't been tampered with. This shows how clever attackers can be, and reminds us that the \"payment hash\" only proves the identity, not the payment amount.",
      "title": "Potential vulnerability in Lightning backends: BOLT-11 \"payment hash\" does not commit to payment!",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html"
    },
    {
      "summary": "Vincent shares a side project focused on collecting data on the lightning network. This project aims to track the network's evolution and evaluate proposals like channel jamming. It also aims to support university research lacking access to real data. More details can be found in [1], and an experimental explorer is available at [2]. Additionally, a public Graphql API [3] is provided. Vincent hopes this project will be useful to others.",
      "summaryeli15": "Vincent has a side project where he collects data on the lightning network. He wants to see how the network is changing and how different solutions affect it. He also wants to support university research by providing real data. There are links to more information and an explorer tool to see the data. Vincent hopes this project will be helpful to others.",
      "title": "An Open Source Framework to Collect Lightning Network Metrics",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004011.html"
    },
    {
      "summary": "In a recent meeting, the participants discussed various topics related to the Lightning Network (LN). \n1. Package Relay: The proposal for package relay was discussed. It involves grouping transactions together to improve efficiency and reliability in the LN.\n2. HLTCs (Hashed Time-Locked Contracts): Changes to HLTCs were discussed, including the introduction of zero fee commitments and the use of ephemeral anchors.\n3. Mempool Improvements: The need for a \"top of block\" mempool or a cluster mempool was discussed to improve transaction selection and ordering.\n4. Taproot: The changes in taproot, including modifications to anchors and revocation paths, were discussed.\n5. Gossip V1.5 vs V2: The benefits and drawbacks of script binding and amount binding in gossip messages were discussed.\n6. Reputation-based Jamming Mitigation: The concept of reputation and scarce resource allocation for preventing channel jamming attacks was discussed.\n7. Simplified Commitments: The possibility of simplifying the LN state machine using a turn-based approach was discussed.\n8. Meta Spec Process: The participants discussed the idea of versioning the LN specifications to improve compatibility and make the document more readable and modular.\n9. Async Payments/Trampoline: The use of trampoline payments in the LN was discussed, which allows for the routing of payments through multiple intermediate nodes.\n\nOverall, the meeting covered a range of topics related to LN specifications, improvements, and security.",
      "summaryeli15": "The annual specification meeting took place in New York City. The participants discussed various topics and took notes, which are available in a Google document. The meeting focused on package relay, HTLCs, mempool organization, taproot, gossip, and more. The participants discussed potential improvements and changes to these areas and explored the idea of versioning the protocol to make future updates easier. They also discussed the concept of trampoline payments, which allow payments to be routed through multiple intermediary nodes.",
      "title": "LN Summit 2023 Notes",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004014.html"
    }
  ]
}
{
  "summary": [
    {
      "summary": "The author of the text is providing an update on the progress of a community process to specify covenants in Bitcoin. They mention that the initial goals were to build a consistent framework for evaluating covenant proposals, open the consensus changes development process beyond the boundaries of Bitcoin Core, and maintain a high-quality technical archive. The author acknowledges other complementary initiatives undertaken by others during the same period. They explain that they have not been able to dedicate as much time to the process due to their involvement in Lightning development. They express that their focus will now be on working towards a secure and reliable Lightning Network. The author encourages others to continue working on covenant changes proposals and suggests that small incremental changes might be sufficient to improve self-custody solutions. They also mention their intent to continue pursuing research and development works and potentially submit an in-depth security review of consensus changes under pseudonyms. The author emphasizes the need for technical historians and archivists in the Bitcoin community and invites others to take up the maintenance and nurturing of the Bitcoin Contracting Primitives WG. They mention previous offers of resources from R&D non-profits, individuals, and VC firms interested in advancing softforks and covenants in the Bitcoin space.",
      "summaryeli15": "The author of the text is providing an update on the progress of a community process to specify covenants in the Bitcoin network. The goal of this process is to evaluate and propose changes to the consensus rules of Bitcoin. The author mentions that other initiatives related to covenant proposals have also been undertaken by different individuals and groups within the community. The author expresses their personal conclusion that their focus will be on working on the Lightning Network rather than the covenant process, due to the importance of scaling and improving the robustness of Lightning. They also encourage others to continue working on covenant changes and emphasize the value of incremental improvements. The author acknowledges that they may have overpromised with regards to the covenant process, but still believes in the importance of maintaining and preserving consensus change proposals. They invite others to reach out if they are interested in continuing the work on the covenant process.",
      "title": "On the experiment of the Bitcoin Contracting Primitives WG and marking this community process \"up for grabs\"",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021786.html"
    },
    {
      "summary": "The text discusses the implementation of a blinded version of the 2-of-2 Schnorr Musig2 for statechains. In this implementation, the server (referred to as party 1) holds a private key necessary for generating an aggregate signature but remains blinded to certain information. Party 1 does not learn the aggregate public key, aggregate signature, or the message being signed. The security in this model depends on trusting the statechain server to accurately report the number of partial signatures generated for a specific key. The full set of signatures is verified client-side. \n\nThe text also provides an explanation of how the 2-of-2 musig2 protocol operates, involving the generation of private keys, public keys, and aggregation of keys. To blind party 1, some modifications are proposed. These modifications involve party 2 handling key aggregation and nonce aggregation, while party 1 remains uninformed about certain values. The text concludes by seeking comments or highlighting potential issues with these proposals.\n\nPlease note that the text includes an indication of an HTML attachment but does not provide any further information about it.",
      "summaryeli15": "This text is discussing the implementation of a protocol called 2-of-2 Schnorr Musig2 for statechains. In simple terms, this protocol allows two parties (referred to as Party 1 and Party 2) to generate an aggregate signature for a message without one of the parties (Party 1) learning certain information. Specifically, Party 1 will be 'blinded' so that it does not learn the aggregate public key, the aggregate signature, or the message being signed. The security of this implementation relies on trust in the statechain server to report the number of partial signatures it has generated and for the full set of signatures to be verified on the client side. The text also provides some technical details on how the protocol operates.",
      "title": "Blinded 2-party Musig2",
      "link": "https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-July/021792.html"
    },
    {
      "summary": "The text explains a method for computing blinding factors in a multi-hop transaction network. In the simplest case, the ultimate sender provides a point R to the ultimate receiver and constructs an onion with an error blinding factor e. The ultimate receiver can claim the payment by revealing e + r, where r is a secret known only to the ultimate receiver. \n\nWhen there is an intermediate node (Carol) in the route, the ultimate sender needs to generate two scalars, c and d, such that c + d = e. The ultimate sender encrypts e to the ultimate receiver and the ciphertext (along with d) to Carol. Each intermediate node adds its per-hop blinding factor to the input point and sends the result to the next hop. The ultimate receiver cannot differentiate whether it received the payment from Carol or directly from the ultimate sender. Carol, however, only knows d and cannot compute r.\n\nIn the case where Carol is a Trampoline node, the ultimate sender creates a Trampoline-level onion and encrypts e, d, and the next Trampoline hop to Carol. Carol then searches for a route to reach the ultimate receiver and encrypts b to Alice. The ultimate receiver receives the payment with the same e * G + R and cannot distinguish the routing path. Each intermediate node has enough information to claim their incoming payment, and only the ultimate sender knows c, allowing it to recover r.",
      "summaryeli15": "This text explains a mathematical demonstration of a method to compute blinding factors for secure communication. The goal is to ensure that the receiver and intermediate nodes only need to know one blinding factor to maintain privacy. In the simplest case, the sender encrypts a message using an error blinding factor and sends it to the receiver. If there is an intermediate node involved, the sender generates two blinding factors and encrypts the message accordingly. Each intermediate node adds its blinding factor and forwards the message, ensuring that the receiver cannot differentiate between direct and indirect routes. The same technique can be extended to trampoline nodes, where the sender encrypts the message for the receiver and the next trampoline node. The receiver and intermediate nodes can still claim their messages without compromising privacy.",
      "title": "Computing Blinding Factors in a PTLC and Trampoline World",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003999.html"
    },
    {
      "summary": "LNbits discovered an exploit that allows an attacker to create balances by manipulating invoices. They have patched this in LNbits version 0.10.5 and advise users to update immediately. The attack involves inserting a payment hash from one payment into a different payment, tricking the backend into thinking they are the same. The attacker creates two invoices, A and B', and then inserts payment_hash(A) into payment_hash(B) to create a malicious invoice, B. The attacker then creates a new account and pays invoice B, causing LNbits backend to credit A and debit B. The critical part is that payment hashes only commit to the preimage, not the payment details. Mitigation involves using unique checking IDs for internal payments or performing additional checks on invoice details. This incident highlights the sophistication of LN-savvy attackers and the importance of understanding the true purpose of the payment hash.",
      "summaryeli15": "LNbits, a team working on Lightning Network applications, recently discovered an exploit that allows attackers to create fraudulent balances by manipulating how invoices are handled internally. They have released a patch to fix this vulnerability and urge users to update their software immediately. In a detailed explanation of the attack, the team describes how an attacker can insert the payment hash of one payment into a different payment, tricking the system into thinking they are the same. The critical part is that payment hashes do not commit to payment details like the amount, only to the preimage. To prevent such attacks, backends should use unique checking IDs or additional checks on invoice details. The team also emphasizes the importance of understanding the sophistication of attackers and clarifies that the payment hash is just a preimage hash, not a payment hash.",
      "title": "Potential vulnerability in Lightning backends: BOLT-11 \"payment hash\" does not commit to payment!",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html"
    },
    {
      "summary": "The writer is sharing a side project they have been working on. They are focused on collecting data on the lightning network to track its evolution and assess different proposals, such as channel jamming, by observing their impact on the network in real-time instead of relying on simulations. They also aim to support university research that lacks access to real data. The writer provides links to a more detailed idea, an experimental explorer, and a public Graphql API for anyone interested. They hope that their project will be helpful to others. The links provided are [1] https://github.com/LNOpenMetrics/lnmetrics.rfc, [2] https://lnmetrics.info/, and [3] https://api.lnmetrics.info/.",
      "summaryeli15": "The author is sharing a side project where they collect data on the lightning network, which is a type of network used for fast and secure Bitcoin transactions. They want to track how the network evolves over time, test new ideas and proposals, and support academic research that doesn't have access to real data. They provide links to a detailed explanation of their project, an experimental explorer where data can be viewed, and a public API to access the data. They hope that this will be helpful to others.",
      "title": "An Open Source Framework to Collect Lightning Network Metrics",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004011.html"
    },
    {
      "summary": "The text after the asterisk discusses the topics covered during a meeting about Lightning Network (LN). The meeting participants discussed various aspects of LN, including package relay, package RBF (Replace-By-Fee), HTLCs (Hash Time-Lock Contracts), mempool policy, taproot, gossip, reputation for channel jamming, simplified commitments, and trampoline payments. They explored different ideas and proposals to enhance the functionality, efficiency, and security of LN. Some ideas included implementing turn-taking in the state machine to simplify the protocol, introducing reputation and resource bucketing to mitigate channel jamming attacks, and considering versioning to allow for more modular and readable specifications. The participants also discussed the potential of trampoline routing for async payments and the need for radius-based gossip in trampoline networks.",
      "summaryeli15": "At the end of June, the annual specification meeting took place in NYC. The participants attempted to take transcript-style notes, which are available on a Google document linked in the original text. The meeting focused on various technical aspects of the Lightning Network. One of the main topics discussed was package relay, which allows for easier inclusion of transactions into the mempool. Furthermore, there were discussions on topics such as script binding, reputation systems for combating network jamming, and simplified commitments. The participants also debated the idea of versioning the Lightning Network specification and the feasibility of implementing trampoline payments. Overall, the meeting aimed to address various technical challenges and propose potential solutions for the further development of the Lightning Network.",
      "title": "LN Summit 2023 Notes",
      "link": "https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004014.html"
    }
  ]
}